@page "/editprofile"
@using BlazorToDoList.Data;
@using BlazorToDoList.Services;
@inject IUserService UserService;
@inject NavigationManager NavigationManager;

<h3 class="mb-4">Edit profile</h3>

<div>
    <p class="text-danger">@ErrorMessage</p>
    <EditForm Model="@User" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        <p class="mb-2">Username:</p>
        <InputText id="name" @bind-Value="User.Username" />
        <ValidationMessage For="@(() => User.Username)" />
        <p class="mb-2">Password:</p>
        <InputText class="mb-2" type="password" id="password" @bind-Value="User.Password" />
        <ValidationMessage For="@(() => User.Password)" />
        <p class="mb-2">Email:</p>
        <InputText class="mb-5" id="email" @bind-Value="User.Email" />
        <ValidationMessage For="@(() => User.Email)" />
        <br />
        <button class="btn btn-primary mb-5" type="submit">Update</button>
    </EditForm>
</div>

@if (!ConfirmDelete)
{
    <button @onclick:preventDefault @onclick="() => ToggleDelete(User)" class="btn btn-danger">Delete your profile</button>
    <a href="" @onclick="@(()=> NavigationManager.NavigateTo("/singleuser"))" @onclick:preventDefault class="btn btn-secondary ms-lg-2">Go back</a>
}
else if (ConfirmDelete && User.Id == TemporaryUser.Id)
{
    <p>Are you sure?</p>
    <td><button @onclick:preventDefault @onclick="() => DeleteUser(User)" class="btn btn-danger">Yes</button></td>
    <td><button @onclick:preventDefault @onclick="() => ToggleDelete(User)" class="btn btn-secondary ms-lg-1">No</button></td>
}


@code {
    private UserItem User { get; set; } = new();
    private UserItem TemporaryUser { get; set; } = new();
    private bool ConfirmDelete { get; set; } = false;
    private string ErrorMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        User = await UserService.GetSingleUserAsync();
    }

    public async Task OnSubmit()
    {
        try
        {
                User = await UserService.EditProfileAsync(User);
                NavigationManager.NavigateTo("/singleuser", true);          
        }
        catch (Exception)
        {
            ErrorMessage = "Fill in the form";
        }

    }
    public async Task DeleteUser(UserItem user)
    {
        try
        {
            await UserService.DeleteUserAsync();
            NavigationManager.NavigateTo("/", true);
        }
        catch (Exception)
        {
            return;
        }
    }
    public void ToggleDelete(UserItem user)
    {
        TemporaryUser = user;
        ConfirmDelete = !ConfirmDelete;
    }
}
