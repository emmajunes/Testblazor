@page "/singlelist"
@using BlazorToDoList.Data;
@using BlazorToDoList.Services;
@using ToDoList.API;
@inject IListService ListService;
@inject ITaskService TaskService;
@inject IUserService UserService;
@inject NavigationManager NavigationManager;

<h3 class="text-uppercase" style="color:@list.TitleColor">@list.ListTitle</h3>

<table class="table">
    <tbody>
        @foreach (var task in tasks)
        {           
            @if(task.Completed == true)
            {
                checkmark = "line-through";
            }
            <tr>
                <td><button @onclick="() => GoToTask(task)" class="border-0 bg-white"><p style="text-decoration:@checkmark"> @task.TaskTitle.ToUpper() <br> - @task.TaskDescription</p></button></td>
                <td> <button @onclick="() => ToggleTask(task)" class="btn btn-primary">Toggle Task</button></td>
                <td>
                @if (!confirmDelete)
                {
                    <td><button @onclick="() => ToggleDelete(task)" class="btn btn-danger">Delete Task</button></td>
                }
                else if (confirmDelete && task.Id == temporaryTask.Id)
                {
                    <p>Are you sure?</p>
                    <td><button @onclick="() => DeleteTask(task)" class="btn btn-danger">Yes</button></td>
                    <td><button @onclick="() => ToggleDelete(task)" class="btn btn-secondary">No</button></td>
                }
                </td>
            </tr>
                checkmark = "none";      
        }
    </tbody>
</table>
<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/editlist"))" @onclick:preventDefault class="btn btn-primary">Edit list</a>
<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/addtask"))" @onclick:preventDefault class="btn btn-primary">Add new task</a>
<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/sorttasks"))" @onclick:preventDefault class="btn btn-primary">Sort tasks</a>
<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/currentuserlists"))" @onclick:preventDefault class="btn btn-secondary">Go back</a>


@code {
    private ToDoListItem list = new ();
    private IEnumerable<TaskItem> tasks = new List<TaskItem>();
    private UserItem currentUser = new();
    private TaskItem temporaryTask = new();
    public bool confirmDelete { get; set; } = false;
    public string checkmark;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var listId = CurrentRecord.Id["ListId"];

            list = await ListService.GetSingleListAsync(Guid.Parse(listId));
            tasks = await TaskService.GetTasksAsync();
        }
        catch (Exception)
        {
            return;
        }
    }

    public void GoToTask(TaskItem taskItem)
    {
        try
        {
            CurrentRecord.Id["TaskId"] = taskItem.Id.ToString();
            NavigationManager.NavigateTo("/singletask", true);
        }
        catch (Exception)
        {
            return;
        }
    }

    public async Task ToggleTask(TaskItem taskItem) 
    {
        try
        {
            CurrentRecord.Id["TaskId"] = taskItem.Id.ToString();
            await TaskService.ToggleTaskAsync(taskItem);
            NavigationManager.NavigateTo("/singlelist", true);
        }
        catch (Exception)
        {
            return;
        }
    }

    public async Task DeleteTask(TaskItem task)
    {
        try
        {
            //Sparar ner specifikt TaskId för den task man klickat på för att kunna radera från denna nivå också.
            //CurrentRecord.Id["TaskId"] = task.Id.ToString();
            await TaskService.GetSingleTaskAsync(task.Id);
            await TaskService.DeleteTaskAsync();
            NavigationManager.NavigateTo("/singlelist", true);
        }
        catch (Exception)
        {
            return;
        }      
    }

    public void ToggleDelete(TaskItem task)
    {
        temporaryTask = task;
        confirmDelete = !confirmDelete;
    }
}
