@page "/singlelist"
@using BlazorToDoList.Data;
@using BlazorToDoList.Services;
@using ToDoList.API;
@inject IListService ListService;
@inject ITaskService TaskService;
@inject IUserService UserService;
@inject NavigationManager NavigationManager;

<h3 style="color:@list.TitleColor">@list.ListTitle</h3>

<table class="table">
    <tbody>
        @foreach (var task in tasks)
        {           
            @if(task.Completed == true)
            {
                checkmark = "line-through";
            }
            <tr>
                <td><button @onclick="() => GoToTask(task)" class="list-button border-0 bg-white"><p style="text-decoration:@checkmark">@task.TaskTitle</p></button></td>
                    <td>@task.TaskTitle</td>     
                    <td>@task.TaskDescription</td>
                    <td>@task.Completed</td>
                </tr>
                checkmark = "none";

            <button @onclick="() => GoToTask(task)" class="btn btn-secondary align-self-end">Go To Task</button>
            <button @onclick="() => DeleteTask(task)" class="btn btn-secondary align-self-end">Delete Task</button>
            <button @onclick="() => ToggleTask(task)" class="btn btn-secondary align-self-end">Toggle Task</button>
        }
    </tbody>
</table>
<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/deletelist"))" @onclick:preventDefault class="btn btn-primary">Delete this list</a>
<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/editlist"))" @onclick:preventDefault class="btn btn-primary">Edit list</a>
<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/addtask"))" @onclick:preventDefault class="btn btn-primary">Add new task</a>
<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/sorttasks"))" @onclick:preventDefault class="btn btn-primary">Sort tasks</a>
<button @onclick="() => GoBack()" class="btn btn-secondary align-self-end">Go back</button>

@code {
    private ToDoListItem list = new ();
    private IEnumerable<TaskItem> tasks = new List<TaskItem>();
    private UserItem currentUser = new();
    public string checkmark { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var listId = CurrentRecord.Id["ListId"];

        list = await ListService.GetSingleListAsync(Guid.Parse(listId));
        tasks = await TaskService.GetTasksAsync(); 
    }

    public void GoToTask(TaskItem taskItem)
    {
        CurrentRecord.Id["TaskId"] = taskItem.Id.ToString();
        NavigationManager.NavigateTo("/singletask", true);
    }

    public async Task ToggleTask(TaskItem taskItem) 
    {
        CurrentRecord.Id["TaskId"] = taskItem.Id.ToString();
        await TaskService.ToggleTaskAsync(taskItem);
        NavigationManager.NavigateTo("/singlelist", true);
    }

    public async Task DeleteTask(TaskItem taskItem)
    {
        //Sparar ner specifikt TaskId för den task man klickat på för att kunna radera från denna nivå också.
        CurrentRecord.Id["TaskId"] = taskItem.Id.ToString();  
        await TaskService.GetSingleTaskAsync(taskItem.Id);
        NavigationManager.NavigateTo("/deletetask", true);
    }

    public async Task GoBack()
    {
        currentUser = await UserService.GetSingleUserAsync();
        if (currentUser.Access == Access.Admin)
        {
            NavigationManager.NavigateTo("/getalllists", true);
        }
        else
        NavigationManager.NavigateTo("/currentuserlists", true);
           
    }
}
