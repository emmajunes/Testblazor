@page "/users"
@using BlazorToDoList.Data;
@using BlazorToDoList.Services;
@using ToDoList.API;
@inject IUserService UserService;
@inject NavigationManager NavigationManager;

<table class="table">
    <tbody>
        <tr>
            <td>Username:</td>
            <td>Email:</td>
            <td>Access:</td>
            <td></td>
        </tr>
        @foreach (var user in UsersList)
        {
            <tr>
                <td>@user.Username</td>
                <td>@user.Email</td>
                <td>@user.Access</td>
                <td>

                    @if (user.Access < CurrentUser.Access)
                    {
                        <button @onclick="() => PromoteUser(user)" class="btn btn-primary align-self-end">Promote</button>
                        <button @onclick="() => DemoteUser(user)" class="btn btn-primary align-self-end">Demote</button>
                    }
                </td>
                <td>
                    @if (user.Access < CurrentUser.Access && CurrentUser.Access == Access.Admin)
                    {
                        @if (!ConfirmDelete)
                        {
                        <td><button @onclick="() => ToggleDelete(user)" class="btn btn-danger">Delete user</button></td>
                        }
                        else if (ConfirmDelete && user.Id == TemporaryUser.Id)
                        {
                        <p>Are you sure?</p>
                        <td><button @onclick="() => DeleteUser(user)" class="btn btn-danger">Yes</button></td>
                        <td><button @onclick="() => ToggleDelete(user)" class="btn btn-secondary">No</button></td>
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private IEnumerable<UserItem> UsersList { get; set; } = new List<UserItem>();
    private UserItem CurrentUser { get; set; } = new();
    private UserItem TemporaryUser { get; set; } = new();
    private bool ConfirmDelete { get; set; } = false;
    private bool Show { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CurrentUser = await UserService.GetSingleUserAsync();
            UsersList = await UserService.GetUsersAsync();
        }
        catch (Exception)
        {
            return;
        }
    }

    public async Task PromoteUser(UserItem user)
    {
        try
        {
            await UserService.PromoteUserAsync(user);
            NavigationManager.NavigateTo("/usersettings", true);
        }
        catch (Exception)
        {
            return;
        }
    }

    public async Task DemoteUser(UserItem user)
    {
        try
        {
            await UserService.DemoteUserAsync(user);
            ConfirmDelete = false;
            NavigationManager.NavigateTo("/usersettings", true);
        }
        catch (Exception)
        {
            return;
        }
    }

    public async Task DeleteUser(UserItem user)
    {
        try
        {
            await UserService.DeleteUserForAdminAsync(user);
            NavigationManager.NavigateTo("/usersettings", true);
        }
        catch (Exception)
        {
            return;
        }
    }

    public void ToggleDelete(UserItem user)
    {
        TemporaryUser = user;
        ConfirmDelete = !ConfirmDelete;
    }
}
