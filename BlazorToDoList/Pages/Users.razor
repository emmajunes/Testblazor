@page "/Users"
@using BlazorToDoList.Data;
@using BlazorToDoList.Services;
@using ToDoList.API;
@inject IUserService UserService;
@inject NavigationManager NavigationManager;

<table class="table">
    <tbody>
        <tr>
            <td>Username:</td>
            <td>Email:</td>
            <td>Access:</td>
        </tr>
        @foreach (var user in users)
        {
                 <tr>
                     <td>@user.Username</td>     
                     <td>@user.Email</td>
                     <td>@user.Access</td>
            @if(user.Access < currentUser.Access)
            {   
                    <button @onclick="() => PromoteUser(user)" class="btn btn-secondary align-self-end">Promote</button>
                    <button @onclick="() => DemoteUser(user)" class="btn btn-secondary align-self-end">Demote</button>      
            }  
                </tr>   
        }
    </tbody>
</table>

@code {
    private IEnumerable<UserItem> users = new List<UserItem>();
    private UserItem currentUser = new();
    public bool show { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentUser = await UserService.GetSingleUserAsync();
            users = await UserService.GetUsersAsync();

        }
        catch (Exception)
        {
            throw;
        }
    }
    //public void GoToUser(UserItem user)
    //{
    //    try
    //    {
    //        NavigationManager.NavigateTo("/singleuser", true); funkar men ingen säkerhet att bara admin får se
    //    }
    //    catch (Exception)
    //    {
    //        throw;
    //    }

    //}
    public async Task PromoteUser(UserItem user)
    {
        try
        {
            await UserService.PromoteUserAsync(user);
            NavigationManager.NavigateTo("/users", true);
        }
        catch (Exception)
        {
            throw;
        }

    }
    public async Task DemoteUser(UserItem user)
    {
        try
        {
            await UserService.DemoteUserAsync(user);
            NavigationManager.NavigateTo("/users", true);
        }
        catch (Exception)
        {
            throw;
        }

    }
}
