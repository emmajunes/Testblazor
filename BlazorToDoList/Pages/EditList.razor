@page "/editlist"
@using BlazorToDoList.Data;
@using BlazorToDoList.Services;
@using ToDoList.API;
@inject IListService ListService;
@inject NavigationManager NavigationManager;

<h3 class="mb-4">Edit list</h3>

<div>
    <p class="text-danger">@errorMessage</p>
    <EditForm Model="@listItem" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        <p class="mb-2">New title:</p>
        <ValidationMessage For="@(() => listItem.ListTitle)" />
        <InputText class="mb-2" id="title" @bind-Value="listItem.ListTitle" />
        <p class="mb-2">New titlecolor:</p>
        <InputSelect id="color" @bind-Value="listItem.TitleColor" class="form-control w-25 mb-5">
            @foreach (var color in Enum.GetValues(typeof(Color)))
            {
                <option value="@color">@color</option>
            }
        </InputSelect>
        <button class="btn btn-primary" type="submit">Submit</button>
        <a href="" @onclick="@(()=> NavigationManager.NavigateTo("/singlelist"))" @onclick:preventDefault class="btn btn-secondary">Cancel</a>
    </EditForm>
</div>

@code {
    private ToDoListItem listItem = new();
    public string errorMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var listId = CurrentRecord.Id["ListId"];
        listItem = await ListService.GetSingleListAsync(Guid.Parse(listId));
    }

    public async Task OnSubmit()
    {
        try
        {
                await ListService.EditListAsync(listItem);
                await ListService.EditTitleColorAsync(listItem);
                NavigationManager.NavigateTo("/singlelist", true);      
        }
        catch (Exception)
        {
            errorMessage = "Please fill in the form";
        }

    }
}
