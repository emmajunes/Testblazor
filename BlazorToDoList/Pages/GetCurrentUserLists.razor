@page "/currentuserlists"
@using BlazorToDoList.Data;
@using BlazorToDoList.Services;
@using ToDoList.API;
@inject IListService ListService;
@inject IUserService UserService;
@inject NavigationManager NavigationManager

<h3>Your lists</h3>

<table class="table">
    <tbody>
        @foreach (var list in currentUserLists)
        {
                <tr>
                    <td><button @onclick="() => GoToList(list)" class="list-button border-0 bg-white text-uppercase"><p style="color:@list.TitleColor">@list.ListTitle</p></button></td>
                    <td>@list.TitleColor</td>
                </tr>

            <button @onclick="() => DeleteList(list)" class="btn btn-secondary align-self-start">Delete List</button>
        }
    </tbody>
</table>

<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/createlist"))" @onclick:preventDefault class="btn btn-primary">Create new list</a>
<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/sortlists"))" @onclick:preventDefault class="btn btn-primary">Sortera listor</a>
<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/singleuser"))" @onclick:preventDefault class="btn btn-primary">Go back</a>


@code {
    private IEnumerable<ToDoListItem> currentUserLists = new List<ToDoListItem>();
    private ToDoListItem list = new();
    
    protected override async Task OnInitializedAsync()
    {
        currentUserLists = await ListService.GetCurrentUserListsAsync();
    }

    public void GoToList(ToDoListItem listItem)
    {
        CurrentRecord.Id["ListId"] = listItem.Id.ToString();
        NavigationManager.NavigateTo("/singlelist", true);
    }

    public void DeleteList(ToDoListItem listItem)
    {
        //Sparar ner specifikt listId för den lista man klickat på för att kunna radera från denna nivå också.
        CurrentRecord.Id["TaskId"] = listItem.Id.ToString();
        ListService.GetSingleListAsync(listItem.Id);
        NavigationManager.NavigateTo("/deletelist", true);
    }  
}
