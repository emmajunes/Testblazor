@page "/currentuserlists"
@using BlazorToDoList.Data;
@using BlazorToDoList.Services;
@using ToDoList.API;
@inject IListService ListService;
@inject IUserService UserService;
@inject NavigationManager NavigationManager

<h3>Lists</h3>

<table class="table">
    <tbody>
        @foreach (var list in currentUserLists)
        {
                <tr>
                    <td><button @onclick="() => GoToList(list)" class="border-0 bg-white text-uppercase"><p style="color:@list.TitleColor">@list.ListTitle</p></button></td>
                <td>
                    @if (!confirmDelete)
                {
                    <td><button @onclick="() => ToggleDelete(list)" class="btn btn-danger">Delete List</button></td>
                }             
                else if (confirmDelete && list.Id == temporaryList.Id)
                {
                    <p>Are you sure?</p>
                    <td><button @onclick="() => DeleteList(list)" class="btn btn-danger">Yes</button></td>
                    <td><button @onclick="() => ToggleDelete(list)" class="btn btn-secondary">No</button></td>
                }
                </td>
            </tr>     
        }
    </tbody>
</table>

<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/createlist"))" @onclick:preventDefault class="btn btn-primary">Create new list</a>
<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/sortlists"))" @onclick:preventDefault class="btn btn-primary">Sort lists</a>
<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/singleuser"))" @onclick:preventDefault class="btn btn-secondary">Go back</a>


@code {
    private IEnumerable<ToDoListItem> currentUserLists = new List<ToDoListItem>();
    private ToDoListItem list = new();
    private ToDoListItem temporaryList = new();
    public bool confirmDelete { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentUserLists = await ListService.GetCurrentUserListsAsync();
        }
        catch (Exception)
        {
            return;
        }
    }

    public void GoToList(ToDoListItem list)
    {
        try
        {
            CurrentRecord.Id["ListId"] = list.Id.ToString();
            NavigationManager.NavigateTo("/singlelist", true);
        }
        catch (Exception)
        {
            return;
        }

    }

    public async Task DeleteList(ToDoListItem list)
    {
        try
        {
            //hämtar först vilken lista man valt för att sedan deleta den.
            await ListService.GetSingleListAsync(list.Id);
            await ListService.DeleteListAsync();
            NavigationManager.NavigateTo("/currentuserlists", true);
        }
        catch (Exception)
        {
            return;
        }
        
    } 
    
    public void ToggleDelete(ToDoListItem list)
    {
        temporaryList = list;
        confirmDelete = !confirmDelete;
    }
}
