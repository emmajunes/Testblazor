@page "/currentuserlists"
@using BlazorToDoList.Data;
@using BlazorToDoList.Services;
@using ToDoList.API;
@inject IListService ListService;
@inject IUserService UserService;
@inject NavigationManager NavigationManager

<h3>Lists</h3>

<table class="table">
    <tbody>
        @foreach (var list in CurrentUserLists)
        {
            <tr>
                <td><button @onclick="() => GoToList(list)" class="border-0 bg-white text-uppercase"><p style="color:@list.TitleColor">@list.ListTitle</p></button></td>
                <td>
                    @if (!ConfirmDelete)
                    {
                    <td><button @onclick="() => ToggleDelete(list)" class="btn btn-danger">Delete list</button></td>
                    }
                    else if (ConfirmDelete && list.Id == TemporaryList.Id)
                    {
                    <p>Are you sure?</p>
                    <td><button @onclick="() => DeleteList(list)" class="btn btn-danger">Yes</button></td>
                    <td><button @onclick="() => ToggleDelete(list)" class="btn btn-secondary">No</button></td>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/createlist"))" @onclick:preventDefault class="btn btn-primary">Create new list</a>
<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/sortlists"))" @onclick:preventDefault class="btn btn-primary">Sort lists</a>
<a href="" @onclick="@(()=> NavigationManager.NavigateTo("/singleuser"))" @onclick:preventDefault class="btn btn-secondary">Go back</a>


@code {
    private IEnumerable<ToDoListItem> CurrentUserLists { get; set; } = new List<ToDoListItem>();
    private ToDoListItem TemporaryList { get; set; } = new();
    private bool ConfirmDelete { get; set; } = false;
    private bool Confirm { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CurrentUserLists = await ListService.GetCurrentUserListsAsync();
        }
        catch (Exception)
        {
            return;
        }
    }

    public void GoToList(ToDoListItem list)
    {
        try
        {
            CurrentRecord.Id["ListId"] = list.Id.ToString();
            NavigationManager.NavigateTo("/singlelist", true);
        }
        catch (Exception)
        {
            return;
        }

    }

    public async Task DeleteList(ToDoListItem list)
    {
        try
        {
            await ListService.GetSingleListAsync(list.Id);
            await ListService.DeleteListAsync();
            NavigationManager.NavigateTo("/currentuserlists", true);
        }
        catch (Exception)
        {
            return;
        }
    }

    public void ToggleDelete(ToDoListItem list)
    {
        TemporaryList = list;
        ConfirmDelete = !ConfirmDelete;
    }
}
