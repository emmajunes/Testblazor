@page "/CreateUser"
@using BlazorToDoList.Data;
@using BlazorToDoList.Services;
@using ToDoList.API;
@inject IUserService UserService;
@inject NavigationManager NavigationManager;

<h3>Create User</h3>
<br />
<div>
    <p class="text-danger">@errorMessage</p>
    <EditForm Model="@newUser" OnSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        Username:<br />
        <InputText id="username" @bind-Value="newUser.Username" />
        <ValidationMessage For="@(() => newUser.Username)" />
        <br /><br />
        Password:<br />
        <InputText type="password" id="password" @bind-Value="newUser.Password" />
        <ValidationMessage For="@(() => newUser.Password)" />
        <br /><br />
        Email:<br />
        <InputText id="email" @bind-Value="newUser.Email" />
        <ValidationMessage For="@(() => newUser.Email)" />
        <br /><br />
        <button type="submit">Submit</button>
    </EditForm>
</div>

@code {
    private UserItem newUser = new();
    public string errorMessage { get; set; } = "";

    public async Task OnSubmit()
    {
        try
        {
            newUser = await UserService.CreateUserAsync(newUser);

            //ändra för om en admin skapar en user så att man inte skickas till login
            //lägg till funktion som meddelar användaren att den skapat sitt konto och kan logga in?
            NavigationManager.NavigateTo("/login", true);
        }
        catch (Exception)
        {

            errorMessage = "User already exists!";
        }
        
    }
}
