@page "/CreateUser"
@using BlazorToDoList.Data;
@using BlazorToDoList.Services;
@using ToDoList.API;
@inject IUserService UserService;
@inject NavigationManager NavigationManager;

<h3>Create User</h3>
<br />
<div>
    <p class="text-danger">@errorMessage</p>
    <EditForm Model="@newUser" OnSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        Username:<br />
        <InputText id="username" @bind-Value="newUser.Username" />
        <ValidationMessage For="@(() => newUser.Username)" />
        <br /><br />
        Password:<br />
        <InputText type="password" id="password" @bind-Value="newUser.Password" />
        <ValidationMessage For="@(() => newUser.Password)" />
        <br /><br />
        Email:<br />
        <InputText id="email" @bind-Value="newUser.Email" />
        <ValidationMessage For="@(() => newUser.Email)" />
        <br /><br />
        <button class="btn btn-primary"type="submit">Create</button>
    </EditForm>
</div>

@code {
    private UserItem newUser = new();
    private UserItem? CurrentUser { get; set; }
    public string errorMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CurrentUser = await UserService.GetSingleUserAsync();
        }
        catch (Exception)
        {
            CurrentUser = null;
        }
    }
    public async Task OnSubmit()
    {
        try
        {
            newUser = await UserService.CreateUserAsync(newUser);
            if(CurrentUser == null)
            {
                NavigationManager.NavigateTo("/login", true);              
            }
            else
            {
                NavigationManager.NavigateTo("/usersettings", true);
            }

        }
        catch (Exception)
        {
            errorMessage = "User already exists!";
        }
        
    }
}
