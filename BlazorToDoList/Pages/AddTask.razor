@page "/addtask"
@using BlazorToDoList.Data;
@using BlazorToDoList.Services;
@inject ITaskService TaskService;
@inject NavigationManager NavigationManager;

<h3 class="mb-4">Add Task</h3>

<div>
    <p class="text-danger">@ErrorMessage</p>
    <EditForm Model="@TaskItem" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        <p class="mb-2">Title:</p>
        <InputText class="mb-2" id="title" @bind-Value="TaskItem.TaskTitle" />
        <ValidationMessage For="@(() => TaskItem.TaskTitle)" />
        <p class="mb-2">Description:</p>
        <InputText class="mb-2" id="description" @bind-Value="TaskItem.TaskDescription" />
        <ValidationMessage For="@(() => TaskItem.TaskDescription)" />
        <p class="mb-2">Priority:</p>
        <InputSelect id="prio" @bind-Value="TaskItem.TaskPrio" class="form-control w-25 mb-5">

            @foreach (var prio in Enum.GetValues(typeof(Priority)))
            {
                <option value="@prio">@prio</option>
            }
        </InputSelect>
        <button class="btn btn-primary" type="submit">Submit</button>
        <a href="" @onclick="@(()=> NavigationManager.NavigateTo("/singlelist"))" @onclick:preventDefault class="btn btn-secondary">Cancel</a>
    </EditForm>
</div>

@code {
    private TaskItem TaskItem {get; set; } = new();
    private string ErrorMessage { get; set; } = "";

    public async Task OnSubmit()
    {
        try
        {
            TaskItem = await TaskService.AddTaskAsync(TaskItem);
            NavigationManager.NavigateTo("/singlelist", true);
        }
        catch (Exception)
        {
            ErrorMessage = "Please fill in the form";
        }
    }
}
